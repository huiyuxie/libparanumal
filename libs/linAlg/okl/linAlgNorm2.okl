/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//using namespace sycl;
#if OCCA_USE_DPCPP==1
#if defined(__SYCL_DEVICE_ONLY__) && defined(TEST_CONSTANT_AS)
#define FORMAT_STRING(X) static const __attribute__((opencl_constant)) char X[]
#else
#define FORMAT_STRING(X) static const char X[]
#endif
#endif

#define p_mask 0xffffffff
#define p_Nwarp 8
#define p_warpSize 32

@kernel void norm2(const dlong Nblocks,
                   const dlong N,
                   const dlong Nreads,
                   const dfloat *x,
                   dfloat *dot,
                   const int dir)
{
  for (dlong bi = 0; bi < Nblocks; ++bi; @outer(0))
  {
     @shared volatile dfloat s_dot[p_Nwarp];
#if OCCA_USE_DPCPP==1
    @shared volatile dfloat s_tmp[p_Nwarp][p_warpSize];
#endif

    @exclusive dlong b;
    @exclusive dfloat r_dot;
    
    for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
      for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	
	//        b = (dir) ? (Nblocks - 1 - bi): bi;
	b = bi;
        r_dot = 0.0;
	
        for (int r = 0; r < Nreads; ++r)
        {
          dlong id = t + p_warpSize * (r + Nreads * (w + b * p_Nwarp));
	  dfloat xm = 0;
	  if(id>=0 && id<N)
	    xm = x[id];
          r_dot += xm*xm;
        }	
      }
    }

#if OCCA_USE_CUDA==1
    for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
      for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	for (int offset = 16; offset > 0; offset /= 2) {
          r_dot += __shfl_down_sync(p_mask, r_dot, offset, 32);
        }
	if (t == 0){
          s_dot[w] = r_dot;
        }
      }
    }
        
    @barrier();

    for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
      for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	
	if (w == 0){
	  r_dot = (t < p_Nwarp) ? s_dot[t] : (dfloat)0.0;
	  for (int offset = p_Nwarp/2; offset > 0; offset /= 2) {
	    r_dot += __shfl_down_sync(p_mask, r_dot, offset, 32);
	  }
	  if(t==0)
	    @atomic *dot += r_dot;
	}
      }
    }
#endif
    
#if OCCA_USE_DPCPP==1
    for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
      for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	s_tmp[w][t] = r_dot;
      }
    }
    
    for (int offset = p_warpSize/2; offset > 0; offset /= 2) {
      @barrier();
      for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
	for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	  if(t<offset){
	    s_tmp[w][t] += s_tmp[w][t+offset];
	  }
        }
      }
    }

    for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
      for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	if(t==0){
	  s_dot[w] = s_tmp[w][0];
	}
      }
    }

    for (int offset = p_Nwarp/2; offset > 0; offset /= 2) {
      @barrier();
      for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
	for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	  
	  if(w==0 && t<offset)
	    s_dot[t] += s_dot[t+offset];
	}
      }
    }
    
    for (int w = 0; w < p_Nwarp; ++w; @inner(1)){
      for (int t = 0; t < p_warpSize; ++t; @inner(0)){
	if(w==0 && t==0){
	  r_dot = s_dot[0];
	  FORMAT_STRING(fmt_out) = "r_dot: %lg\n";
	  ext::oneapi::experimental::printf(fmt_out, r_dot);
	  
	  @atomic *dot += r_dot;
        }
      }
    }    
#endif
  }
}
