/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// 
#define p_mask 0xffffffff
#define p_Nwarp 8
#define p_warpSize 32

@kernel void innerProd(const dlong Nblocks,
                       const dlong N,
                       const dlong Nreads,
                       @ restrict const dfloat *x,
                       @ restrict const dfloat *y,
                       @ restrict dfloat *dot,
                       int dir)
{
  for (dlong bi = 0; bi < Nblocks; ++bi; @outer(0))
  {

    @shared dfloat s_dot[p_Nwarp];
#if OCCA_USE_DPCPP==1
    @shared dfloat s_tmp[p_Nwarp][p_warpSize];
#endif

@exclusive dlong b;

    for (int w = 0; w < p_Nwarp; ++w; @inner(1))
    {
      for (int t = 0; t < p_warpSize; ++t; @inner(0))
      {

        b = (dir) ? Nblocks - 1 - bi : bi;
        dfloat r_dot = 0.0;

        #pragma unroll 
        for (int r = 0; r < Nreads; ++r)
        {
          dlong id = t + p_warpSize * (r + w * Nreads + b * Nreads * p_Nwarp);
          dfloat xm = (id < N) ? x[id]*y[id] : (dfloat)0.0;
          r_dot += xm;
        }

#if OCCA_USE_CUDA==1
        for (int offset = 16; offset > 0; offset /= 2) {
          r_dot += __shfl_down_sync(p_mask, r_dot, offset, 32);
        }      
#endif

#if OCCA_USE_DPCPP==1
	s_tmp[w][t] = r_dot;
	for (int offset = 16; offset > 0; offset /= 2) {
	  @barrier();
          s_tmp[w][t] += s_tmp[w][t+offset];
        }
	if(t==0)
	  r_dot = s_tmp[w][0];
#endif
	
        if (t == 0){
          s_dot[w] = r_dot;
        }

        @barrier();

        if (w == 0)
        {
          r_dot = (t < p_Nwarp) ? s_dot[t] : (dfloat)0.0;

#if OCCA_USE_CUDA==1	 
          for (int offset = p_Nwarp/2; offset > 0; offset /= 2) {
            r_dot += __shfl_down_sync(p_mask, r_dot, offset, 32);
          }
#endif
#if OCCA_USE_DPCPP==1
	  s_dot[t] = r_dot;
	  for (int offset = p_Nwarp/2; offset > 0; offset /= 2) {
//	    @barrier();
	    s_dot[t] += s_dot[t+offset];
	  }
	  if(t==0) r_dot = s_dot[0];
#endif
	  
          if (t == 0){
            @atomic *dot += r_dot;
          }
        }
      }
    }
  }
}


@kernel void innerProdnc(const dlong Nblocks,
                       const dlong N,
                       const dlong Nreads,
                       @ restrict const dfloat *x,
                       @ restrict const dfloat *y,
                       @ restrict dfloat *dot,
                       int dir)
{
  for (dlong bi = 0; bi < Nblocks; ++bi; @outer(0))
  {

    @shared dfloat s_dot[p_Nwarp];
#if OCCA_USE_DPCPP==1
    @shared dfloat s_tmp[p_Nwarp][p_warpSize];
#endif

@exclusive dlong b;

    for (int w = 0; w < p_Nwarp; ++w; @inner(1))
    {
      for (int t = 0; t < p_warpSize; ++t; @inner(0))
      {

        b = (dir) ? Nblocks - 1 - bi : bi;
        dfloat r_dot = 0.0;

        #pragma unroll 
        for (int r = 0; r < Nreads; ++r)
        {
          dlong id = t + p_warpSize * (r + w * Nreads + b * Nreads * p_Nwarp);
          dfloat xm = (id < N) ? ncLoad(x+id)*y[id] : (dfloat)0.0;
          r_dot += xm;
        }

#if OCCA_USE_CUDA==1
        for (int offset = 16; offset > 0; offset /= 2) {
          r_dot += __shfl_down_sync(p_mask, r_dot, offset, 32);
        }      
#endif

#if OCCA_USE_DPCPP==1
	s_tmp[w][t] = r_dot;
	for (int offset = 16; offset > 0; offset /= 2) {
	  @barrier();
          s_tmp[w][t] += s_tmp[w][t+offset];
        }
	if(t==0)
	  r_dot = s_tmp[w][0];
#endif
	
        if (t == 0){
          s_dot[w] = r_dot;
        }

        @barrier();

        if (w == 0)
        {
          r_dot = (t < p_Nwarp) ? s_dot[t] : (dfloat)0.0;

#if OCCA_USE_CUDA==1	 
          for (int offset = p_Nwarp/2; offset > 0; offset /= 2) {
            r_dot += __shfl_down_sync(p_mask, r_dot, offset, 32);
          }
#endif
#if OCCA_USE_DPCPP==1
	  s_dot[t] = r_dot;
	  for (int offset = p_Nwarp/2; offset > 0; offset /= 2) {
//	    @barrier();
	    s_dot[t] += s_dot[t+offset];
	  }
	  if(t==0) r_dot = s_dot[0];
#endif
	  
          if (t == 0){
            @atomic *dot += r_dot;
          }
        }
      }
    }
  }
}


#if 0
@kernel void innerProd(const dlong Nblocks,
                       const dlong N,
                       @restrict const  dfloat *x,
                       @restrict const  dfloat *y,
                       @restrict        dfloat *dot,
                       int dir){

#if 1
  
  for(dlong bi=0;bi<Nblocks;++bi;@outer(0)){

    @exclusive dlong b;

    @shared dfloat s_dot[p_blockSize];

    for(int t=0;t<p_blockSize;++t;@inner(0)){

      b = dir? Nblocks-1-bi: bi;
      dlong id = t + b*p_blockSize;

      dfloat r_dot = 0.0;
      while (id<N) {
        r_dot += x[id]*y[id];
        id += p_blockSize*Nblocks;
      }
      s_dot[t] = r_dot;
    }

#else
  
  for(dlong bi=0;bi<Nblocks;++bi;@outer(0)){

    @shared dfloat s_dot[p_blockSize];
    @exclusive dlong b;

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      b = (dir) ? Nblocks-1-bi:bi;
      const dlong Nreads = (N+Nblocks*p_blockSize-1)/(Nblocks*p_blockSize);

      dfloat r_dot = 0.0;
      for(int r=0;r<Nreads;++r){
         dlong rd = (dir) ? (Nreads-1-r):r;
         dlong id = t + b*p_blockSize*Nreads  + rd*p_blockSize;
         r_dot += (id<N) ? x[id]*y[id]:(dfloat)0.0;
      }
      s_dot[t] = r_dot;
    }
#endif

#if p_blockSize > 512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512) s_dot[t] += s_dot[t+512];
#endif
#if p_blockSize > 256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256) s_dot[t] += s_dot[t+256];
#endif
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128) s_dot[t] += s_dot[t+128];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 64) s_dot[t] += s_dot[t+ 64];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 32) s_dot[t] += s_dot[t+ 32];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 16) s_dot[t] += s_dot[t+ 16];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  8) s_dot[t] += s_dot[t+  8];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  4) s_dot[t] += s_dot[t+  4];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  2) s_dot[t] += s_dot[t+  2];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  1) dot[b] = s_dot[0] + s_dot[1];
  }

  for(dlong b=0;b<1;++b;@outer(0)){

    @shared dfloat s_dot[p_blockSize];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      dlong id = t;

      dfloat r_dot = 0.0;
      while (id<Nblocks) {
        r_dot += dot[id];
        id += p_blockSize;
      }
      s_dot[t] = r_dot;
    }

#if p_blockSize > 512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512) s_dot[t] += s_dot[t+512];
#endif
#if p_blockSize > 256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256) s_dot[t] += s_dot[t+256];
#endif
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128) s_dot[t] += s_dot[t+128];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 64) s_dot[t] += s_dot[t+ 64];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 32) s_dot[t] += s_dot[t+ 32];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 16) s_dot[t] += s_dot[t+ 16];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  8) s_dot[t] += s_dot[t+  8];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  4) s_dot[t] += s_dot[t+  4];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  2) s_dot[t] += s_dot[t+  2];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  1) dot[0] = s_dot[0] + s_dot[1];
  }
}
#endif

#if 0
@kernel void innerProductAtomic(const dlong N,
                               const dlong Nblocks,
                               @restrict const  dfloat *  w,
                               @restrict const  dfloat *  x,
                               @restrict dfloat *  wx){


  for(dlong b=0;b<Nblocks;++b;@outer(0)){

    @shared volatile dfloat s_wx[p_blockSize];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      dlong id = t + b*p_blockSize;
      dfloat tmp  = 0;
      while(id<N){
        tmp += w[id]*x[id];
        id += Nblocks*p_blockSize;
      }
      s_wx[t] = tmp;
    }

    @barrier("local");

#if p_blockSize > 512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512) s_wx[t] += s_wx[t+512];
    @barrier("local");
#endif

#if p_blockSize > 256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256) s_wx[t] += s_wx[t+256];
    @barrier("local");
#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128) s_wx[t] += s_wx[t+128];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 64) s_wx[t] += s_wx[t+ 64];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 32) s_wx[t] += s_wx[t+ 32];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 16) s_wx[t] += s_wx[t+ 16];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  8) s_wx[t] += s_wx[t+  8];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  4) s_wx[t] += s_wx[t+  4];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  2) s_wx[t] += s_wx[t+  2];

    for(int t=0;t<p_blockSize;++t;@inner(0))
      if(t<  1){
        dfloat res = s_wx[0]+s_wx[1];
        atomicAdd(wx,res);
      }

  }
}

#endif
